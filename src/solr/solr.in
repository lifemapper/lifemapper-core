#!/usr/bin/env bash
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# CONTROLLING STARTUP:
#
# Use solr -help to see available command-line options. In addition
# to passing command-line options, this script looks for an include
# file named solr.in.sh to set environment variables. Specifically,
# the following locations are searched in this order:
#
# ./
# $HOME/.solr.in.sh
# /usr/share/solr
# /usr/local/share/solr
# /var/solr/
# /opt/solr
#
# Another option is to specify the full path to the include file in the
# environment. For example:
#
#   $ SOLR_INCLUDE=/path/to/solr.in.sh solr start
#
# Note: This is particularly handy for running multiple instances on a
# single installation, or for quick tests.
#
# Finally, developers and enthusiasts who frequently run from an SVN
# checkout, and do not want to locally modify bin/solr.in.sh, can put
# a customized include file at ~/.solr.in.sh.
#
# If you would rather configure startup entirely from the environment, you
# can disable the include by exporting an empty SOLR_INCLUDE, or by
# ensuring that no include files exist in the aforementioned search list.

SOLR_INSTALL_DIR=@SOLRDIR@
SOLR_PORT=@SOLR_PORT@
SOLR_PORT2=@SOLR_PORT2@
ZOOKEEPER_PORT=@ZOOKEEPER_PORT@

if [ ! -d "$SOLR_INSTALL_DIR" ]; then
  echo "$SOLR_INSTALL_DIR not found! Please check the SOLR_INSTALL_DIR setting in your $0 script."
  exit 1
fi

# Path to an include file that defines environment specific settings to override default
# variables used by the bin/solr script. It's highly recommended to define this script so
# that you can keep the Solr binary files separated from live files (pid, logs, index data, etc)
# see bin/solr.in.sh for an example
SOLR_ENV=/etc/default/solr.in.sh

if [ ! -f "$SOLR_ENV" ]; then
  echo "$SOLR_ENV not found! Please check the SOLR_ENV setting in your $0 script."
  exit 1
fi

# Specify the user to run Solr as; if not set, then Solr will run as root.
# Running Solr as root is not recommended for production environments
RUNAS=@SOLRUSER@

# verify the specified run as user exists
runas_uid=`id -u $RUNAS`
if [ $? -ne 0 ]; then
  echo "User $RUNAS not found! Please create the $RUNAS user before running this script."
  exit 1
fi

case "$1" in
  start|stop|restart|status)
    SOLR_CMD=$1
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit
esac

# Runs solr in cloud mode on 2 ports of localhost (TESTING ONLY)
SOLR_SCRIPT="$SOLR_INSTALL_DIR/bin/solr"
if [ -n "$RUNAS" ]; then
    if [[ $SOLR_CMD = start || $SOLR_CMD = restart  ]]; then
        su -c "SOLR_INCLUDE=$SOLR_ENV   $SOLR_SCRIPT $SOLR_CMD -c -p $SOLR_PORT" - $RUNAS
        # Zookeeper connection string in SOLR_ENV
        su -c "SOLR_INCLUDE=$SOLR_ENV   $SOLR_SCRIPT $SOLR_CMD -c -p $SOLR_PORT2" - $RUNAS
    elif [[ $SOLR_CMD = stop  ]]; then
        su -c "SOLR_INCLUDE=$SOLR_ENV   $SOLR_SCRIPT $SOLR_CMD -p $SOLR_PORT" - $RUNAS
        su -c "SOLR_INCLUDE=$SOLR_ENV   $SOLR_SCRIPT $SOLR_CMD -p $SOLR_PORT2" - $RUNAS
    else
        su -c "SOLR_INCLUDE=$SOLR_ENV   $SOLR_SCRIPT $SOLR_CMD" - $RUNAS
    fi
else
    SOLR_INCLUDE=$SOLR_ENV   $SOLR_SCRIPT $SOLR_CMD
fi

