#!/bin/bash
#
# This script is creates configuration files for postgres and pgbouncer. 
# The script can be run at any time to remove all the previous configuration
# and create a new one. 

usage () 
{
    echo "Usage: $0"
    echo "This script is run during the roll install and will:"
    echo "     - inserts host IP in @LMHOME@/config/config.lmcore.ini\n"
    echo "     - installs cron files\n"
    echo "   "
}

if [ $# -ne 0 ]; then
    usage
    exit 0
fi 

set_defaults() {
    LOG=@LMSCRATCHDISK@/log/`/bin/basename $0`.log
    rm -f $LOG
    touch $LOG
    
    hn=`/bin/hostname`
    idx=`expr index "$hn" .`
    shortname=${hn:0:idx-1}
    MEMBERSHIP=`/opt/rocks/bin/rocks list host $shortname | grep -v MEMBERSHIP | awk '{print $1}'`

    PROF=/etc/profile.d/lifemapper-core.sh
    echo "-- set environment"  >> $LOG
    if [ -f $PROF ] ; then
	 . $PROF 
    else
    	echo "ERROR: file $PROF not found" >> $LOG 
    	exit
    fi

    echo "-- enable modules"  >> $LOG
    source /usr/share/Modules/init/bash

    # Rocks version
    ROCKS_VER=`/opt/rocks/bin/rocks list roll | grep base | awk '{print $2}'`
   
    PROFILE=/var/lib/pgsql/.bash_profile
    BIN=@PKGROOT@/rocks/bin
    WHL_DIR=@PKGROOT@/rocks/etc
    PY3=@PYBIN@
    
    # Source function library.
    INITD=/etc/rc.d/init.d
    . $INITD/functions
}


cmd_opt_python () {
	cmd=$1
    echo "-- $1 opt-python" >> $LOG
    module $1 opt-python
    $PY3 --version >> $LOG
}

set_permissions () {
    /bin/egrep -i "^lmwriter" /etc/passwd
    if [ $? -ne 0 ]; then
        echo "Error: user lmwriter does not exist" >> $LOG
        exit 1
    fi

    echo "Update group permissions for lmwriter on @LMHOME@" >> $LOG
    for item in "config" "Lm*" "__init__.py*" ; do
        /bin/chgrp -R lmwriter @LMHOME@/$item
        /bin/chmod -R g+ws     @LMHOME@/$item
    done
}

# Ordered installations use included wheel files
order_wheel_installs () {
    # Some filenames <> package names (more-itertools, cherrypy, etc)
    BASE_DEPS="more_itertools six zipp"
    PYTESTCOV_PLUS_DEPS="coverage py importlib_metadata iniconfig toml pluggy attrs pyparsing packaging pytest pytest_cov"
    CHERRYPY_PLUS_DEPS="pytz jaraco.functools tempora portend jaraco.classes importlib_resources jaraco.text jaraco.collections cheroot zc.lockfile CherryPy"
    REQUESTS_DEPS="urllib3 idna certifi chardet requests"

    echo "-- install ordered wheel dependencies ..." 
    for dep in $BASE_DEPS
        do
            wname=$WHL_DIR/$dep*whl
            echo "install common dependency $dep ..." >> $LOG
            $PY3 -m pip install $wname
        done
    for dep in $PYTESTCOV_PLUS_DEPS
        do
            wname=$WHL_DIR/$dep*whl
            echo "install pytest-cov ordered dependency $dep ..." >> $LOG
            $PY3 -m pip install $wname
        done
    for dep in $CHERRYPY_PLUS_DEPS
        do
            wname=$WHL_DIR/$dep*whl
            echo "install cherrypy ordered dependency $dep ..." >> $LOG
            $PY3 -m pip install $wname
        done
    for dep in $REQUESTS_DEPS
        do
            wname=$WHL_DIR/$dep*whl
            echo "install requests ordered dependency $dep ..." >> $LOG
            $PY3 -m pip install $wname
        done
}

# Install all python wheel files with pip
install_wheels () {
    $PY3 -m ensurepip --default-pip
    $PY3 -m pip install --upgrade pip
    
    order_wheel_installs 

    INSTALLED_PKGS=`$PY3 -m pip list | /usr/bin/grep -v Package | /usr/bin/grep -v "^----" | /usr/bin/awk '{print $1}'`
    # install any remaining wheel files, ignore previously installed files
    echo "-- install remaining wheel dependencies ..." >> $LOG
    FILES=$WHL_DIR/*whl
    startidx=$((${#WHL_DIR} + 2))
    for f in $FILES
        do
            filelen=${#f}
            # filename prefix sometimes differs from package name
            pkgname=$(echo $f | cut -c$startidx-$filelen | cut -d'-' -f1)
            if [[ ${INSTALLED_PKGS[*]} =~ $pkgname ]]; then
                echo "$pkgname exists ..." >> $LOG
            else
                echo "install remaining dependency $pkgname ..." >> $LOG
                $PY3 -m pip install $f
            fi
        done
}

finish_solr_install () {
    echo "-- update solr permissions" >> $LOG
    /usr/bin/chown root:solr /etc/default/solr.in.sh
    /usr/bin/chmod 640 /etc/default/solr.in.sh
    
    echo "-- update solr index" >> $LOG
    $BIN/update-lmcore >> $LOG  2>&1
}


# update linker paths
run_ldconfig () {
    echo "-- run ldconfig" >> $LOG
    /sbin/ldconfig
}

# need to update openssl for postgres
update_openssl() {
    echo "-- yum update openssl" >> $LOG
    cmd_opt_python unload 
    /usr/bin/yum --enablerepo base update openssl >> $LOG 
    cmd_opt_python load 
}

# install cron jobs for daily execution
install_cron_jobs () {
    echo "-- Start install-lmcore-cron" >> $LOG
    $BIN/install-lmcore-cron
    echo "-- End install-lmcore-cron" >> $LOG
}

# run update_config to put correct IP, makeflow parameters lmcore's config.lmcore.ini 
update_config() {
    echo "-- update any configuration here" >> $LOG
}


TimeStamp () {
    echo $1 `/bin/date` >> $LOG
}

####### Main #######
set_defaults
TimeStamp "# Start"

install_wheels
finish_solr_install
set_permissions
# install_cron_jobs
update_config

TimeStamp "# End"
